@page "/finance"
@inject NavigationManager navigationManager
@inject FinanceControl.Data.FinanceService expenseService
@inject FinanceControl.Data.AuthenticationService authService

<style>
    .filter-container {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
    }

        .filter-container label {
            font-weight: bold;
        }

        .filter-container select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

    .btn-filter {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        background-color: #007bff;
        color: white;
        transition: background-color 0.3s ease;
    }

        .btn-filter:hover {
            background-color: #0056b3;
        }

    .expense-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .expense-table th,
        .expense-table td {
            border: 1px solid #ccc;
            padding: 8px;
        }

        .expense-table th {
            background-color: #f5f5f5;
            text-align: left;
        }

        .expense-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .expense-table tr:hover {
            background-color: #e9e9e9;
        }

        .expense-table td:last-child {
            display: flex;
            gap: 5px;
        }

        .expense-table button {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            .expense-table button:hover {
                background-color: #dcdcdc;
            }
</style>

<!-- Restante do código da página ExpenseList.razor -->
@if (authService.IsAuthenticated)
{


    <h3>Lista de Finanças</h3>

    <div class="filter-container">
        <label for="selectMonth">Mês:</label>
        <select id="selectMonth" @bind="selectedMonth">
            <option value="1">Janeiro</option>
            <option value="2">Fevereiro</option>
            <option value="3">Março</option>
            <option value="4">Abril</option>
            <option value="5">Maio</option>
            <option value="6">Junho</option>
            <option value="7">Julho</option>
            <option value="8">Agosto</option>
            <option value="9">Setembro</option>
            <option value="10">Outubro</option>
            <option value="11">Novembro</option>
            <option value="12">Dezembro</option>

        </select>

        <label for="selectYear">Ano:</label>
        <select id="selectYear" @bind="selectedYear">
            <option value="2023">2023</option>
            <!-- Adicione opções para outros anos -->
        </select>

        <button class="btn-filter" @onclick="FilterExpenses">Filtrar</button>
    </div>
    <div class="expense-controls">
        <button class="btn-new-expense" @onclick="GoToAddExpense">Novos Dados</button>
    </div>


    @if (finances != null && finances.Any())
    {

        <table class="expense-table">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th>Valor</th>
                    <th>Categoria</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expense in finances)
                {
                    <tr>
                        <td>@expense.Name</td>
                        <td class="@((expense.Category == "Gasto") ? "text-red" : "text-green")">@expense.Amount.ToString("C")</td>
                        <td>@expense.Category</td>
                        <td>
                            <button @onclick="() => EditFinance(expense.Id)">Editar</button>
                            <button @onclick="() => DeleteFinance(expense.Id)">Excluir</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }
    else
    {
        <p>Nenhuma despesa registrada.</p>
    }
}
else
{
    GoToLogin();
}

@code {
    private List<FinanceControl.Data.Finance> finances;
    private int selectedMonth = DateTime.Now.Month;
    private int selectedYear = DateTime.Now.Year;
    protected override async Task OnInitializedAsync()
    {
        await LoadExpenses();
    }

    private async Task LoadExpenses()
    {
        finances = await expenseService.FilterByMonthAndYear(selectedMonth, selectedYear);
    }

    private void EditFinance(int expenseId)
    {
        navigationManager.NavigateTo("/editfinance?financeID=" + expenseId);
    }

    private async Task DeleteFinance(int expenseId)
    {
        FinanceControl.Data.Finance expenseToRemove = finances.FirstOrDefault(e => e.Id == expenseId);

        await expenseService.DeleteFinance(expenseToRemove);
        await LoadExpenses();
    }
    private void GoToAddExpense()
    {
        navigationManager.NavigateTo($"/addfinance?month={selectedMonth}&year={selectedYear}");
    }
    private async Task FilterExpenses()
    {
        finances = await expenseService.FilterByMonthAndYear(selectedMonth, selectedYear);
    }
    private void GoToLogin()
    {
        navigationManager.NavigateTo($"/");
    }
}
